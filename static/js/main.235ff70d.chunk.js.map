{"version":3,"sources":["Pages.tsx","containers/Page1/index.tsx","containers/Page2/index.tsx","containers/Page3/index.tsx","App.tsx","utils/space.ts","serviceWorker.js","index.js"],"names":["pages","path","View","history","useHistory","onClick","push","PATH_PREFIX","Content","Layout","ContentWrapper","styled","PagePadding","div","Routes","location","useLocation","pathname","useEffect","window","scrollTo","map","i","noPadding","key","exact","App","className","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAyBeA,EAdO,CACpB,CACEC,KAAM,IACNC,KCVoB,WACtB,IAAMC,EAAUC,cAChB,OACE,oCACE,qCACA,4BAAQC,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,OAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,YDKJ,CACEN,KAAM,SACNC,KEdoB,WACtB,IAAMC,EAAUC,cAChB,OACE,oCACE,qCACA,4BAAQC,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,OAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,YFSJ,CACEN,KAAM,SACNC,KGlBoB,WACtB,IAAMC,EAAUC,cAChB,OACE,oCACE,qCACA,4BAAQC,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,OAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,SACA,4BAAQF,QAAS,kBAAMF,EAAQG,KAAKC,EAAc,YAAlD,a,4QCJEC,EAAYC,IAAZD,QACFE,EAAiBC,YAAOH,EAAPG,CAAH,ICAS,OACA,OALN,OAFH,OAMS,OADI,QDM3BC,EAAcD,IAAOE,IAAV,ICTM,QDaVN,EAAc,kCAE3B,SAASO,IACP,IAAMC,EAAWC,cACXC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAUE,SAE3B,OADAC,qBAAU,kBAAMC,OAAOC,SAAS,EAAG,KAAI,CAACH,IAEtC,oCACE,yCAAeA,GACdjB,EAAMqB,KAAI,WAA4BC,GAA5B,IAAGrB,EAAH,EAAGA,KAAH,EAASsB,UAAT,EAAoBrB,KAApB,OACT,6BAAMK,EAAcN,MAGtB,kBAAC,IAAD,KACGD,EAAMqB,KAAI,WAA4BC,GAA5B,IAAGrB,EAAH,EAAGA,KAAMsB,EAAT,EAASA,UAAWrB,EAApB,EAAoBA,KAApB,OACT,kBAAC,IAAD,CAAOsB,IAAKF,EAAGG,OAAK,EAACxB,KAAMM,EAAcN,GACtCsB,EACC,kBAACrB,EAAD,MAEA,kBAACU,EAAD,KACE,kBAACV,EAAD,aAuBDwB,MAbf,WACE,OACE,qEAEE,kBAAC,IAAD,KACE,kBAAChB,EAAD,CAAgBiB,UAAU,eACxB,kBAACb,EAAD,UEzCUc,QACW,cAA7BT,OAAOJ,SAASc,UAEe,UAA7BV,OAAOJ,SAASc,UAEhBV,OAAOJ,SAASc,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.235ff70d.chunk.js","sourcesContent":["import React from \"react\";\nimport Page3 from \"src/containers/Page3\";\nimport Page2 from \"src/containers/Page2\";\nimport Page1 from \"src/containers/Page1\";\n\ntype Page = {\n  path: string;\n  View: React.FC;\n  noPadding?: boolean;\n};\n\nconst pages: Page[] = [\n  {\n    path: \"/\",\n    View: Page1,\n  },\n  {\n    path: \"/page2\",\n    View: Page2,\n  },\n  {\n    path: \"/page3\",\n    View: Page3,\n  },\n];\nexport default pages;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PATH_PREFIX } from \"src/App\";\n\nconst Page1: React.FC = () => {\n  const history = useHistory();\n  return (\n    <>\n      <h1>Page1</h1>\n      <button onClick={() => history.push(PATH_PREFIX + \"/\")}>Page1</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page2\")}>Page2</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page3\")}>Page3</button>\n    </>\n  );\n};\n\nexport default Page1;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PATH_PREFIX } from \"src/App\";\n\nconst Page2: React.FC = () => {\n  const history = useHistory();\n  return (\n    <>\n      <h1>Page2</h1>\n      <button onClick={() => history.push(PATH_PREFIX + \"/\")}>Page1</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page2\")}>Page2</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page3\")}>Page3</button>\n    </>\n  );\n};\n\nexport default Page2;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PATH_PREFIX } from \"src/App\";\n\nconst Page3: React.FC = () => {\n  const history = useHistory();\n  return (\n    <>\n      <h1>Page3</h1>\n      <button onClick={() => history.push(PATH_PREFIX + \"/\")}>Page1</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page2\")}>Page2</button>\n      <button onClick={() => history.push(PATH_PREFIX + \"/page3\")}>Page3</button>\n    </>\n  );\n};\n\nexport default Page3;\n","import { Layout } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, useLocation } from \"react-router-dom\";\nimport pages from \"src/Pages\";\nimport styled from \"styled-components\";\nimport { BASE, FOOTER_HEIGHT, HEADER_HEIGHT, PAGE_SIDE_PADDING, X_LARGE } from \"./utils/space\";\n\nconst { Content } = Layout;\nconst ContentWrapper = styled(Content)`\n  min-height: calc(100vh - ${HEADER_HEIGHT} - ${FOOTER_HEIGHT} - ${X_LARGE} - ${BASE});\n  margin-top: ${HEADER_HEIGHT};\n  padding: 0px ${PAGE_SIDE_PADDING};\n`;\nconst PagePadding = styled.div`\n  padding: ${X_LARGE} 0px;\n`;\n\nexport const PATH_PREFIX = \"/react-router-github-pages-test\";\n\nfunction Routes() {\n  const location = useLocation();\n  const pathname = location?.pathname;\n  useEffect(() => window.scrollTo(0, 0), [pathname]);\n  return (\n    <>\n      <div>pathname:{pathname}</div>\n      {pages.map(({ path, noPadding, View }, i) => (\n        <div>{PATH_PREFIX + path}</div>\n      ))}\n\n      <Switch>\n        {pages.map(({ path, noPadding, View }, i) => (\n          <Route key={i} exact path={PATH_PREFIX + path}>\n            {noPadding ? (\n              <View />\n            ) : (\n              <PagePadding>\n                <View />\n              </PagePadding>\n            )}\n          </Route>\n        ))}\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      react-router-github-pages-test\n      <Router>\n        <ContentWrapper className=\"site-layout\">\n          <Routes />\n        </ContentWrapper>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","export const TINY = \"4px\";\nexport const SMALL = \"8px\";\nexport const BASE = \"16px\";\nexport const LARGE = \"24px\";\nexport const X_LARGE = \"32px\";\nexport const HUGE = \"48px\";\n\nexport const PAGE_SIDE_PADDING = \"16px\";\nexport const HEADER_HEIGHT = \"64px\";\nexport const FOOTER_HEIGHT = \"72px\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"src/App\";\nimport * as serviceWorker from \"src/serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}